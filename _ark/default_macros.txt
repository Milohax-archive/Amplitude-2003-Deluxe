; These must correspond to program enumerations.  When it becomes
; too painful to maintain by hand, we'll write a script to do it,
; to be run in the "data build" step.

; From os/System.h
"TRUE" { 1 } 
"FALSE" { 0 } 

; From utl/Spew.h
"SPEW_ALL_CHANNELS" { 999 }

; From os/Joypad.h
"kPad_L2" { 0 }
"kPad_R2" { 1 }
"kPad_L1" { 2 }
"kPad_R1" { 3 }
"kPad_Tri" { 4 }
"kPad_Circle" { 5 }
"kPad_X" { 6 }
"kPad_Square" { 7 }
"kPad_Select" { 8 }
"kPad_L3" { 9 }
"kPad_R3" { 10 }
"kPad_Start" { 11 }
"kPad_DUp" { 12 }
"kPad_DRight" { 13 }
"kPad_DDown" { 14 }
"kPad_DLeft" { 15 }
"kPad_LStickUp" { 16 }
"kPad_LStickRight" { 17 }
"kPad_LStickDown" { 18 }
"kPad_LStickLeft" { 19 }
"kPad_RStickUp" { 20 }
"kPad_RStickRight" { 21 }
"kPad_RStickDown" { 22 }
"kPad_RStickLeft" { 23 }
"kPad_NumButtons" { 24 }

;;from TutorialGameLogic.cpp
"kRotLeft" {100}
"kRotRight" {101}
"kRotBoth" {102}
"kRotNone" {103}

"kLeftAnalog" { 0 }
"kRightAnalog" { 1 }

; from db/Types.h, macros for instrument type:
"kDrum"    { 0 }
"kBass"    { 1 }
"kSynth"   { 2 }
"kGuitar"  { 3 }
"kVocal"   { 4 }
"kFX"      { 5 }

; from db/Types.h, macros for music mode
"kMusicModeNone"  { 0 }
"kAxing"          { 1 }                   ; axe track (freestyle)
"kRiffing"        { 2 }                   ; pitch track (freestyle)
"kScratching"     { 3 }                   ; scratch track (freestyle)
"kVoxing"         { 4 }                   ; vocal-axe track (freestyle)
"kCatching"       { 5 }                   ; catch track (game-mode)

; from libsn.h, macros for profiler
"k1KHz"  { 300000 }
"k2KHz"  { 150000 }
"k4KHz"  {  75000 }
"k10KHz" {  30000 }
"k20KHz" {  15000 }

; from ?, synth core effects macros
"OFF" { 0 }
"ROOM" { 1 }
"STUDIO_A" { 2 }
"STUDIO_B" { 3 }
"STUDIO_C" { 4 }
"HALL" { 5 }
"SPACE" { 6 }
"ECHO" { 7 }
"DELAY" { 8 }
"PIPE" { 9 }


;from synth/common/common.h for softfx.
"kNoFx" {0}
"kStreamingAudio" {1}
"kResonantFilter" {2}
"kBitCrusher" {3}
"kPassThrough" {4}
"kResonantFilter2" {5}
"kFlanger" {6}

;from synth/LFO.h
"kSineLFO" {0}
"kTriangleLFO" {1}
"kSquareLFO" {2}
"kFlatLFO" {3}


"kSignalWet" {0}
"kSignalDry" {1}
"kSignalWetAndDry" {2}

; from meta/Mix.h, metagame locations
"kStart" { 0 }
"kMain" { 1 }
"kPickFreq" { 2 }
"kFreqMaker" { 3 }
"kSolo" { 4 }
"kMulti" { 5 }
"kNet" { 6 }
"kArenaSelect" { 7 }
"kOptions" { 8 }
"kHyperspace" { 9 }

; from db/Types.h, rule sets
"kRuleGame" { 1 }
"kRuleTutorial" { 2 }
"kRuleRemix" { 3 }
"kRuleDuel" { 4 }

; from db/Types.h, powerup types
"kNoPowerup" {0}
"kAutocatcher" { 1 }
"kMultiplier" { 2 }
"kSlowdown" { 3 }
"kFreestyle" { 4 }
"kBumper" { 5 }
"kCrippler" { 6 }

; from trig/System.cpp, game state
"kGameWon"           { 0 }
"kGameLost"          { 1 }
"kGameQuit"          { 2 }
"kGamePracticeOver"  { 3 }
"kGamePlaying"       { 4 }

; from db/Avatar.h, instrument animations
"kIA_Left"      { 0 }
"kIA_Center"    { 1 }
"kIA_Right"     { 2 }
"kIA_Idle"      { 3 }
"kIA_Special_1" { 4 }
"kIA_Special_2" { 5 }
"kIA_Special_3" { 6 }

; from db/Avatar.h, part identifiers
"kLeftArm"      { 0 }
"kRightArm"     { 1 }
"kHead"         { 2 }
"kTorso"        { 3 }
"kLowerBody"    { 4 }
"kHeadGear"     { 5 }
"kFaceGear"     { 6 }
"kInstrument"   { 7 }

; from db/InputMap.h, input event types
"kBtn_None"       { 0 }
"kBtn_RotLeft"    { 1 }
"kBtn_RotRight"   { 2 }
"kBtn_PlayNote0"  { 3 }
"kBtn_PlayNote1"  { 4 }
"kBtn_PlayNote2"  { 5 }
"kBtn_CamChange"  { 6 }
"kBtn_Powerup"    { 7 }
"kBtn_GuitarAxe"  { 8 }
"kBtn_ToggleFreq" { 9 }

"kStick_None"       { 0 }
"kStick_Expression" { 1 }
"kStick_Camera"     { 2 }

; from gfx/Overlay.cpp, sButtonIconName (these are just defaults):
"kButtonIconSquare"   {0}
"kButtonIconTriangle" {1}
"kButtonIconCircle"   {2}
"kButtonIconL1"       {3}
"kButtonIconR1"       {4}
"kButtonIconR2"       {5}

; from gfx/Overlay.cpp, OvyDialog frame values
"kDialogTopLeft"      { 100 }
"kDialogTopRight"     { 0 }
"kDialogDefault"      { -1 }

; from gfx/Mgr.cpp, for arena triggers
"HEALTH_GOOD" { (health 66 100) }
"HEALTH_OKAY" { (health 33 66)  }
"HEALTH_BAD"  { (health  0 33)  }
